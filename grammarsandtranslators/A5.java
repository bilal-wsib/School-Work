import java.io.*;

class A5{


public static void main(String[] args) throws Exception {
	//construct the token array
	BufferedWriter bw=new BufferedWriter(new FileWriter("a5.output"));
	A5Scanner scanner = new A5Scanner(new FileInputStream(new File("A5.tiny")));
	// note that yylex() is the default method to get the next token in scanner that is generated by JLlex.
	Symbol token;
	while ((token=scanner.yylex()).sym!= A5Sym.EOF) {
		tokens.add(token);
	}
	tokens.add(token);   // add EOF as the last token in the array
	boolean legal= Program() && nextToken().sym==A5Sym.EOF;
	bw.write((legal)?"legal":"illegal");
	bw.close();
}


static boolean Program() throws Exception{
    int savedPointer = pointer;
    if (MethodDecl() && Program())
        return true;
    pointer = savedPointer;
    if (MethodDecl())
        return true;
    pointer = savedPointer;
    return false;
}

static boolean MethodDecl() throws Exception{
    int savedPointer = pointer;
    if(Type() && nextToken().sym==A5Sym.MAIN && Identifier() && nextToken().sym==A5Sym.LPAREN && FormalParams() && nextToken().sym==A5Sym.RPAREN && Block())
        return true;
    pointer = savedPointer;
    if(Type() && Identifier() && nextToken().sym==A5Sym.LPAREN && FormalParams() && nextToken().sym==A5Sym.RPAREN && Block())
        return true;
    pointer = savedPointer;
    return false;
}

static boolean FormalParams() throws Exception{
    int savedPointer = pointer;
    if(FormalParam())
        return true;
    pointer = savedPointer;
    if(FormalParam() && nextToken().sym==A5Sym.COMMA && FormalParams())
        return true;
    pointer = savedPointer;
    return false;
}

static boolean FormalParam() throws Exception{
    int savedPointer = pointer;
    if(Type() && Identifier())
        return true;
    pointer = savedPointer;
    return false;
}

static boolean Type() throws Exception{
    int savedPointer = pointer;
    if (nextToken().sym==A5Sym.INT && nextToken().sym==A5Sym.REAL)
        return true;
    pointer = savedPointer;
    return false;
}

static boolean Block() throws Exception{
    int savedPointer = pointer;
    if(nextToken().sym==A5Sym.BEGIN && Statements() && nextToken().sym==A5Sym.END)
        return true;
    pointer = savedPointer;
    if(nextToken().sym==A5Sym.BEGIN && nextToken().sym==A5Sym.END)
        return true;
    pointer = savedPointer;
    return false;
}

static boolean Statements() throws Exception{
    int savedPointer = pointer;
    if(Statement() && Statements())
        return true;
    pointer = savedPointer;
    if(Statement)
        return true;
    pointer = savedPointer;
    return false;
}

static boolean Statement() throws Exception{
    int savedPointer = pointer;
    if(Block())
        return true;
    pointer = savedPointer;
    if(LocalVarDecl())
        return true;
    pointer = savedPointer;
    if(AssignStmt())
        return true;
    pointer = savedPointer;
    if(ReturnStmt())
        return true;
    pointer = savedPointer;
    if(IfStmt())
        return true;
    pointer = savedPointer;
    if(WriteStmt())
        return true;
    pointer = savedPointer;
    if(ReadStmt())
        return true;
    pointer = savedPointer;
    return false;
}

static boolean LocalVarDecl() throws Exception{
    int savedPointer = pointer;
    if(Type() && Identifier() && nextToken().sym==A5Sym.SEMI)
        return true;
    pointer = savedPointer;
    return false;
}

static boolean AssignStmt() throws Exception{
    int savedPointer = pointer;
    if(Identifier() && nextToken().sym==A5Sym.CEQUAL && Expression() && nextToken().sym==A5Sym.SEMI)
        return true;
    pointer = savedPointer;
    return false;
}

static boolean ReturnStmt() throws Exception{
    int savedPointer = pointer;
    if(nextToken().sym==A5Sym.RETURN && Expression() && nextToken().sym==A5Sym.SEMI)
        return true;
    pointer = savedPointer;
    return false;
}

static boolean IfStmt() throws Exception{
    int savedPointer = pointer;
    if(nextToken().sym==A5Sym.IF && nextToken().sym==A5Sym.LPAREN && BoolExpression() && nextToken().sym==A5Sym.RPAREN && Statement())
        return true;
    pointer = savedPointer;
    if(nextToken().sym==A5Sym.IF && nextToken().sym==A5Sym.LPAREN && BoolExpression() && nextToken().sym==A5Sym.RPAREN && Statement() && nextToken().sym==A5Sym.ELSE && Statement())
        return true;
    pointer = savedPointer;
    return false;
}

static boolean WriteStmt() throws Exception{
    int savedPointer = pointer;
    if(nextToken().sym==A5Sym.WRITE && nextToken().sym==A5Sym.LPAREN && Expression() && nextToken().sym==A5Sym.COMMA && Quote() && nextToken().sym==A5Sym.RPAREN && nextToken().sym==A5Sym.SEMI )
        return true;
    pointer = savedPointer;
    return false;
}

static boolean ReadStmt() throws Exception{
    int savedPointer = pointer;
    if(nextToken().sym==A5Sym.READ && nextToken().sym==A5Sym.LPAREN && Identifier() && nextToken().sym==A5Sym.COMMA && Quote() && nextToken().sym==A5Sym.RPAREN && nextToken().sym==A5Sym.SEMI )
        return true;
    pointer = savedPointer;
    return false;
}

static boolean Expression() throws Exception{
    int savedPointer = pointer;
    if( MultExpr() )
        return true;
    pointer = savedPointer;
    if( MultExpr() && nextToken().sym==A5Sym.PLUS && Expression())
        return true;
    pointer = savedPointer;
    if( MultExpr() && nextToken().sym==A5Sym.MINUS && Expression())
        return true;
    pointer = savedPointer;
    return false;
}

static boolean MultExpr() throws Exception{
    int savedPointer = pointer;
    if( PrimaryExpr() )
        return true;
    pointer = savedPointer;
    if( PrimaryExpr() && nextToken().sym==A5Sym.TIMES && MultExpr())
        return true;
    pointer = savedPointer;
    if( PrimaryExpr() && nextToken().sym==A5Sym.DIVIDE && MultExpr())
        return true;
    pointer = savedPointer;
    return false;
}

static boolean PrimaryExpr() throws Exception{
    int savedPointer = pointer;
    if( NUMBER() )
        return true;
    pointer = savedPointer;
    if( Identifier() )
        return true;
    pointer = savedPointer;
    if( nextToken().sym==A5Sym.LPAREN && Expression() && nextToken().sym==A5Sym.RPAREN)
        return true;
    pointer = savedPointer;
    if( Identifier() && nextToken().sym==A5Sym.LPAREN && ActualParams() && nextToken().sym==A5Sym.RPAREN)
        return true;
    pointer = savedPointer;
     if( Identifier() && nextToken().sym==A5Sym.LPAREN && nextToken().sym==A5Sym.RPAREN)
        return true;
    pointer = savedPointer;
    return false;
}

static boolean BoolExpression() throws Exception{
    int savedPointer = pointer;
    if( Expression() && nextToken().sym==A5Sym.EEQUAL && Expression() )
        return true;
    pointer = savedPointer;
    if( Expression() && nextToken().sym==A5Sym.NEQUAL && Expression() )
        return true;
    pointer = savedPointer;
    return false;
}

static boolean ActualParams(){
    int savedPointer = pointer;
    if( Expression() )
        return true;
    pointer = savedPointer;
     if( Expression() && nextToken().sym==A5Sym.COMMA && ActualParams() )
        return true;
    pointer = savedPointer;
    return false;
}

}
