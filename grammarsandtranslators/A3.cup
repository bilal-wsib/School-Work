import java.io.*;

terminal 			QUOTE, IDENTIFIER, IF, ELSE, THEN, WRITE, READ, RETURN, BEGIN, END, MAIN, INT, REAL, SEMI, COMMA, LPAREN, RPAREN, PLUS, MINUS, TIMES, DIVIDE, CEQUAL, EEQUAL, NEQUAL, NUMBER, STRING;

non terminal Integer Program;
non terminal MethodDecl, e1,FormalParams, FormalParam, Type, Block, Statements, Statement, LocalVarDecl, AssignStmt, ReturnStmt, IfStmt, WriteStmt, ReadStmt, Expression, MultExpr, PrimaryExpr, BoolExpression, ActualParams, UNMATCHEDSTMT, MATCHEDSTMT;

precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence left ELSE;

/* High-level program structures */
Program			::= MethodDecl {: RESULT = 1; :}
				  | MethodDecl Program:e {: RESULT=e+1; :}
				  ;

MethodDecl		::= Type MAIN IDENTIFIER LPAREN e1 RPAREN Block
				  | Type IDENTIFIER LPAREN e1 RPAREN Block
				  ;

e1 ::= FormalParams | ;
FormalParams	::= 
				  | FormalParam 
				  | FormalParam COMMA FormalParams
				  ;

FormalParam		::= Type IDENTIFIER
				  ;

Type			::= INT 
				  | REAL
				  ;


/* Statements */
Block			::= BEGIN Statements END
				  | BEGIN END
				  ;

Statements		::= Statement
				  | Statement Statements
				  ;


LocalVarDecl 	::= Type IDENTIFIER SEMI
				  ;

AssignStmt		::= IDENTIFIER CEQUAL Expression SEMI
				  ;

ReturnStmt		::= RETURN Expression SEMI
				  ;

Statement			::= UNMATCHEDSTMT | MATCHEDSTMT;

MATCHEDSTMT             ::= Block | LocalVarDecl | AssignStmt 	| ReturnStmt 	| WriteStmt | ReadStmt | IF BoolExpression THEN MATCHEDSTMT ELSE MATCHEDSTMT;

UNMATCHEDSTMT           ::=  IF BoolExpression THEN MATCHEDSTMT ELSE UNMATCHEDSTMT;

WriteStmt		::= WRITE LPAREN Expression COMMA QUOTE RPAREN SEMI
				  ;

ReadStmt		::= READ LPAREN IDENTIFIER COMMA QUOTE RPAREN SEMI
				  ;


/* Expressions */
Expression		::= MultExpr
				  | MultExpr PLUS  Expression
				  | MultExpr MINUS Expression
				  ;

MultExpr 		::= PrimaryExpr
				  | PrimaryExpr TIMES  MultExpr 
				  | PrimaryExpr DIVIDE MultExpr
				  ;

PrimaryExpr		::= NUMBER
				  | IDENTIFIER
				  | LPAREN Expression RPAREN
				  | IDENTIFIER LPAREN ActualParams RPAREN
				  | IDENTIFIER LPAREN RPAREN
				  ;

BoolExpression	::= Expression EEQUAL Expression
				  | Expression NEQUAL Expression
				  ;

ActualParams	::= Expression
				  | Expression COMMA ActualParams 
				  ;